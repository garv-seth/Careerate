
# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Careerate to Azure Web App

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: careerateacr.azurecr.io
  IMAGE_NAME: careerate

jobs:
  build:
    runs-on: 'ubuntu-latest'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npm run check

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=main-${{ github.sha }}

    - name: Build and push container image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Assign AcrPull role to App Service
      run: |
        PRINCIPAL_ID=$(az webapp identity show --name Careerate --resource-group Careerate --query principalId --output tsv)
        ACR_NAME=$(echo "${{ env.REGISTRY }}" | cut -d'.' -f1)
        ACR_ID=$(az acr show --name $ACR_NAME --resource-group Careerate --query id --output tsv)
        az role assignment create --assignee $PRINCIPAL_ID --scope $ACR_ID --role "AcrPull"

    - name: Harden Security and Wait for Permissions
      run: |
        echo "Disabling ACR admin user and setting App Service to use Managed Identity..."
        ACR_NAME=$(echo "${{ env.REGISTRY }}" | cut -d'.' -f1)
        az acr update --name $ACR_NAME --resource-group Careerate --admin-enabled false
        az webapp config set --name Careerate --resource-group Careerate --generic-configurations '{"acrUseManagedIdentityCreds": "True"}'
        
        echo "Waiting 60 seconds for role assignment to propagate..."
        sleep 60

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'Careerate'
        slot-name: 'production'
        images: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}'

    - name: Restart App Service to force image pull
      run: |
        echo "Restarting the App Service to force a new image pull..."
        az webapp restart --name Careerate --resource-group Careerate

    - name: Post-deployment health check
      run: |
        echo "Waiting for application to start..."
        sleep 30
        
        # Basic health check
        HEALTH_URL="${{ steps.deploy-to-webapp.outputs.webapp-url }}/api/health"
        if curl -f "$HEALTH_URL" > /dev/null 2>&1; then
          echo "✅ Application is healthy"
        else
          echo "⚠️ Health check failed, but deployment completed"
        fi
